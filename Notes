Development notes/journal

2014-02-15

Architectural notes

The initial target machine is the N8VEM SBC V2 with 512 KB of SRAM, some
form of disk storage, a UART and a regular interrupt.

The emulator has a 16550 UART at the SBC V2 IO ports, using the Altair
HDSK which works on 128 byte sectors and a regular interrupt 10 times a
second.

The first page of memory 0000 - 00ff is reserved for the interrupt, reset
and CP/M emulator code.

ff00 - ffff is reserved for the HBIOS.

The top 32 KB of memory from 8000 - ff00 is reserved for the OS.

Applications have from 0100 - 7fff for their use.

Booting uses RomWBW BIOS, but could be readily adapted to boot from CP/M.

2014-02-18

HBIOS is proving highly problematic with interrupt code, and I think I may
have to delay the implementation of the interrupt/multitasking code until I
can get my hands on a real SBC V2 with the Zilog Peripherals board with 
proper vectored interrupts.  It may be better to write device drivers
directly rather than relying on HBIOS as originally planned.  That's an
unfortunate setback.

Until then, I plan to get a "single-tasking" Unix-like system up and running,
in particular with the file system and a robust TTY driver.

Either way I should continue to learn about Z80 interrupts and SDCC's
interaction with interrupt-driven code.

 2014-02-21

 Major oversight, entry.s entrypoint was wrong, executing over the stack and
 over the top of memory to eventually come to my code... interrupts were never
 buggy!

2014-09-22

Some architectural decisions.  HBIOS/WBWBIOS are amazing projects, but
overlap with the goal of a Unix-like OS on the N8VEM considerably.  They're
basically operating systems in their own right.  I intend to write device
drivers directly.  WBW source code should prove a useful starting point for
the various devices.  Still waiting on real hardware before I can really get
started on development.

Current tasks are userspace traps and filesystem.
